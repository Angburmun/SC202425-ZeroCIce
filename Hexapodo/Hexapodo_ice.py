# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `Hexapodo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module RoboInterface
_M_RoboInterface = Ice.openModule('RoboInterface')
__name__ = 'RoboInterface'

if '_t_ByteSeq' not in _M_RoboInterface.__dict__:
    _M_RoboInterface._t_ByteSeq = IcePy.defineSequence('::RoboInterface::ByteSeq', (), IcePy._t_byte)

if 'MovementDirection' not in _M_RoboInterface.__dict__:
    _M_RoboInterface.MovementDirection = Ice.createTempClass()
    class MovementDirection(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    MovementDirection.FOWARD = MovementDirection("FOWARD", 0)
    MovementDirection.BACKWARD = MovementDirection("BACKWARD", 1)
    MovementDirection.LEFT = MovementDirection("LEFT", 2)
    MovementDirection.RIGHT = MovementDirection("RIGHT", 3)
    MovementDirection.STOP = MovementDirection("STOP", 4)
    MovementDirection._enumerators = { 0:MovementDirection.FOWARD, 1:MovementDirection.BACKWARD, 2:MovementDirection.LEFT, 3:MovementDirection.RIGHT, 4:MovementDirection.STOP }

    _M_RoboInterface._t_MovementDirection = IcePy.defineEnum('::RoboInterface::MovementDirection', MovementDirection, (), MovementDirection._enumerators)

    _M_RoboInterface.MovementDirection = MovementDirection
    del MovementDirection

if 'Position' not in _M_RoboInterface.__dict__:
    _M_RoboInterface.Position = Ice.createTempClass()
    class Position(object):
        def __init__(self, x=0.0, y=0.0, z=0.0):
            self.x = x
            self.y = y
            self.z = z

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_RoboInterface.Position):
                return NotImplemented
            else:
                if self.x != other.x:
                    return False
                if self.y != other.y:
                    return False
                if self.z != other.z:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_RoboInterface._t_Position)

        __repr__ = __str__

    _M_RoboInterface._t_Position = IcePy.defineStruct('::RoboInterface::Position', Position, (), (
        ('x', (), IcePy._t_float),
        ('y', (), IcePy._t_float),
        ('z', (), IcePy._t_float)
    ))

    _M_RoboInterface.Position = Position
    del Position

_M_RoboInterface._t_HexapodController = IcePy.defineValue('::RoboInterface::HexapodController', Ice.Value, -1, (), False, True, None, ())

if 'HexapodControllerPrx' not in _M_RoboInterface.__dict__:
    _M_RoboInterface.HexapodControllerPrx = Ice.createTempClass()
    class HexapodControllerPrx(Ice.ObjectPrx):

        def move(self, direction, speed, context=None):
            return _M_RoboInterface.HexapodController._op_move.invoke(self, ((direction, speed), context))

        def moveAsync(self, direction, speed, context=None):
            return _M_RoboInterface.HexapodController._op_move.invokeAsync(self, ((direction, speed), context))

        def begin_move(self, direction, speed, _response=None, _ex=None, _sent=None, context=None):
            return _M_RoboInterface.HexapodController._op_move.begin(self, ((direction, speed), _response, _ex, _sent, context))

        def end_move(self, _r):
            return _M_RoboInterface.HexapodController._op_move.end(self, _r)

        def stop(self, context=None):
            return _M_RoboInterface.HexapodController._op_stop.invoke(self, ((), context))

        def stopAsync(self, context=None):
            return _M_RoboInterface.HexapodController._op_stop.invokeAsync(self, ((), context))

        def begin_stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RoboInterface.HexapodController._op_stop.begin(self, ((), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_RoboInterface.HexapodController._op_stop.end(self, _r)

        def getSnapshot(self, context=None):
            return _M_RoboInterface.HexapodController._op_getSnapshot.invoke(self, ((), context))

        def getSnapshotAsync(self, context=None):
            return _M_RoboInterface.HexapodController._op_getSnapshot.invokeAsync(self, ((), context))

        def begin_getSnapshot(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RoboInterface.HexapodController._op_getSnapshot.begin(self, ((), _response, _ex, _sent, context))

        def end_getSnapshot(self, _r):
            return _M_RoboInterface.HexapodController._op_getSnapshot.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RoboInterface.HexapodControllerPrx.ice_checkedCast(proxy, '::RoboInterface::HexapodController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RoboInterface.HexapodControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RoboInterface::HexapodController'
    _M_RoboInterface._t_HexapodControllerPrx = IcePy.defineProxy('::RoboInterface::HexapodController', HexapodControllerPrx)

    _M_RoboInterface.HexapodControllerPrx = HexapodControllerPrx
    del HexapodControllerPrx

    _M_RoboInterface.HexapodController = Ice.createTempClass()
    class HexapodController(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RoboInterface::HexapodController')

        def ice_id(self, current=None):
            return '::RoboInterface::HexapodController'

        @staticmethod
        def ice_staticId():
            return '::RoboInterface::HexapodController'

        def move(self, direction, speed, current=None):
            raise NotImplementedError("servant method 'move' not implemented")

        def stop(self, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def getSnapshot(self, current=None):
            raise NotImplementedError("servant method 'getSnapshot' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RoboInterface._t_HexapodControllerDisp)

        __repr__ = __str__

    _M_RoboInterface._t_HexapodControllerDisp = IcePy.defineClass('::RoboInterface::HexapodController', HexapodController, (), None, ())
    HexapodController._ice_type = _M_RoboInterface._t_HexapodControllerDisp

    HexapodController._op_move = IcePy.Operation('move', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_RoboInterface._t_MovementDirection, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    HexapodController._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    HexapodController._op_getSnapshot = IcePy.Operation('getSnapshot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_RoboInterface._t_ByteSeq, False, 0), ())

    _M_RoboInterface.HexapodController = HexapodController
    del HexapodController

# End of module RoboInterface
